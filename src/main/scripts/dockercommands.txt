## Use to run postgres db docker image
docker run --name postgresDB -p 5432:5432 -e POSTGRES_DB=postgres
-e POSTGRES_PASSWORD=password -d postgres:alpine3.18

docker run --name spring-boot-docker -p 8080:8080
 --link postgresDB:postgresDB
 -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgresDB:5432/postgres
 -e SPRING_PROFILES_ACTIVE=dev simpath/spring-boot-docker
----------------------------------------
# Example MVN Command for CI
mvn clean package verify docker:push
-----------------------------
# build application image
mvn clean package -e -U docker:build

#start docker compose in background
docker-compose up -d

#stop docker-compose
docker-compose down
---------------------------------
## Create portainer service in docker swarm
docker service create \
--name portainer \
--publish 9000:9000 \
--constraint 'node.role == manager' \
--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
portainer/portainer \
-H unix:///var/run/docker.sock

docker run -d -p 9000:9000 --name portainer --restart=always -v portainer_data:/data portainer/portainer -H tcp://host.docker.internal:2375
----------------------------------
## ssh to node on DigitalOcean
ssh -i "~/.ssh/<your key here>"  root@<your node ip here>

#Init Docker Swarm
docker swarm init

## Create portainer service in docker swarm on port 80
docker service create \
--name portainer \
--publish 80:9000 \
--constraint 'node.role == manager' \
--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
portainer/portainer \
-H unix:///var/run/docker.sock

docker swarm init --force-new-cluster --advertise-addr node3:2377

# postgres Service
docker service create --name postgresDB -p 5432:5432 -e POSTGRES_DB=spring -e POSTGRES_PASSWORD=password postgres:alpine3.18

 # List Processes in service
docker service ps postgresDB

---------------------------
# With Overlay Network
docker network create --driver overlay simpath-service-network

docker service create --name postgresDB -p 5432:5432 -e POSTGRES_DB=spring -e POSTGRES_PASSWORD=password --network simpath-service-network postgres:alpine3.18
docker service create --name spring-boot-docker -p 8080:8080 -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgresDB:5432/spring  -e SPRING_PROFILES_ACTIVE=dev --network simpath-service-network simpath/spring-boot-docker

------------------------------------
#docker swarm stack
docker service rm postgresDB spring-boot-docker
docker stack deploy -c docker-compose.yml simpath_stack